Question 1:

function halveArray(n) {
    while (n > 1) {
        n = Math.floor(n / 2);
    }
}


sol- n,n/2,n/4......n/2^k;                                                                          1
n/2^k=1
n=2^k
log n=klog2
k=log(n)

O(log(n))


---------------------------------------------------------------------------------------------------------------------------------------


 Question 2:

function binarySearch(arr, target) {
    let left = 0, right = arr.length - 1;
    while (left <= right) {
        let mid = Math.floor((left + right) / 2);
        if (arr[mid] === target) return mid;
        else if (arr[mid] < target) left = mid + 1;
        else right = mid - 1;
    }
    return -1;
}


sol-n,n/2,n/4......n/2^k  (since array size is divided into half after each iteration)                   2
   n/2^k=1
n=2^k
log n=klog2
k=log(n)

O(log(n))



-----------------------------------------------------------------------------------------------------------------------------------


 Question 5:

function logarithmicPrint(n) {
    for (let i = 1; i < n; i *= 2) {
        console.log(i);
    }
}


sol-1,2,4......2^k                                                                                           3

2^k=n
klog2=logn
k=log(n)

O(log(n))


-------------------------------------------------------------------------------------------------------------------------------------



 Question 7:

function divideByThree(n) {
    while (n > 1) {
        n = Math.floor(n / 3);
    }
}


sol-n,n/3,n/9....n/3^k-1                                                                                       4
n/3^k=1
n=3^k
logn=klog3
k=logn/log3

O(log(n))--with base 3


---------------------------------------------------------------------------------------------------------------------------------------



 Question 8:

function logPowerPrint(n) {
    for (let i = 1; i <= n; i *= 3) {
        console.log(i);
    }
}


sol-1,3,9......3^k                                                                                              5
3^k=n
klog3=logn
k=logn/log3

O(log(n))--with base 3




-------------------------------------------------------------------------------------------------------------------------------------


 Question 11:

function nestedHalving(n) {
    while (n > 1) {
        n = Math.floor(Math.sqrt(n));
    }
}


sol-n,n^1/2,n^1/4.....n^1/2^k                                                                                     6
n^1/2^k=1
1/2^klogn=log1
logn=2^k
log(logn)=klog2
k=log(log(n))

O(log(log(n)))






---------------------------------------------------------------------------------------------------------------------------------------------




 Question 12:

function logLogGrowth(n) {
    let count = 0;
    for (let i = 2; i < n; i = Math.pow(i, 2)) {
        count++;
    }
}



sol-2,4,16,256.....2^2^k                                                                                             7
2^klog2=logn
klog2=log(log(n))
k=log(log(n))

O(log(log(n)))



------------------------------------------------------------------------------------------------------------------------------------------------------